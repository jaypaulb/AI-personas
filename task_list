# Project Scope

This project is a GoLang application that integrates with the Canvus API (MCS) and Google Gemini GenAI models to automate persona-driven focus group analysis and Q&A workflows on a business canvas. The app will:
- Monitor a Canvus canvas for specific widget triggers (image and note creation/updates)
- Extract business model data from notes
- Use Gemini GenAI to generate diverse personas and simulate focus group sessions
- Persist persona sessions for ongoing Q&A
- Visualize persona responses and meta-responses on the canvas using notes and connectors

# Development Plan

## Architecture
- Modular Go application with clear separation between:
  - Canvus API client (already present)
  - Gemini GenAI client (implemented for text; OpenAI DALL路E used for images)
  - Event monitoring and trigger logic
  - Persona/session management
  - Canvas visualization logic
- Use environment variables for configuration (.env)
- Use Go modules for dependency management
- Ensure robust error handling and logging

## Methods & Approaches
- Use Go routines and channels for concurrent widget monitoring and event handling
- Use context.Context for cancellation and timeouts
- Use a persistent store (in-memory or file-based) for persona session state
- Use color assignment logic for persona notes
- Use the official Gemini API for text (OpenAI DALL路E for image generation)
- Write unit and integration tests for all major components

# Task List

## 1. Project Structure & Setup
- [x] Create .gitignore for Go
- [x] Initialize GitHub repo and push initial commit
- [x] Create directories: /cmd, /internal, /pkg, /test
- [x] Add README.md with project overview and setup instructions
- [x] Load .env file in both app and tests

## 2. Canvus API Integration
- [x] Validate canvusapi.go client
- [x] Add wrapper for widget event subscription and parsing
- [x] Implement widget trigger detection logic
- [x] Integration test for Canvus event monitor (fully automated)

## 3. Gemini GenAI Integration
- [x] Implement Gemini text client for persona generation and Q&A
- [x] Implement OpenAI DALL路E image client for persona avatars (Gemini image API not available/region-locked)
- [x] Add session management for persistent persona conversations

## 4. Business Canvas Data Extraction
- [x] Implement extraction of business model data from notes
- [x] Validate extraction with test data

## 5. Persona Generation & Management
- [x] Implement persona generation workflow (4 diverse personas)
- [x] Assign unique colors and anchor positions
- [x] Create persona notes in anchor zone (index 2)
- [x] Persist persona sessions

## 6. Question Handling Workflow
- [x] Detect New_AI_Question note and start monitoring for '?'.
- [x] Update note title to _Monitoring when monitoring starts.
- [x] When note text ends with '?', wait 3 seconds of inactivity, then:
    - [x] Update note title to _Answering.
    - [x] Check/move/scale note to ensure space for 9 surrounding notes (step 2.1).
    - [x] Send question to each persona chat session and create response notes in B1, C2, B3, A2 (step 2.2).
    - [x] Limit persona response to CHAT_TOKEN_LIMIT if possible.
    - [x] For each persona, send the other three responses and ask for a revised answer; create follow-up notes clockwise around the original response (step 2.3).

## 7. Testing & Validation
- [x] Write unit tests for all modules
- [x] Write integration tests for end-to-end flows
- [x] Manual validation with MCS test canvas

## 8. Documentation
- [x] Document all modules and workflows
- [x] Update README with usage and contribution guidelines

## 9. CI/CD (Optional)
- [x] Add GitHub Actions for linting, testing, and build 

# Note
- Image generation uses OpenAI DALL路E due to Gemini API limitations in your region/account. 

# Task List

- [x] Persona system prompt and session initialization
- [x] Persona color mapping and note creation
- [x] Grid layout and connector logic (matching screenshot)
- [x] Robust grid space/overlap handling (move/scale logic, user message if needed)
- [x] LLM response length handling (re-prompt for succinctness)
- [x] WaitGroup crash fix
- [x] All feedback from user implemented

**Ready for testing and further feedback.** 